#first = " Tyler"
#last = "Broc"
#fullname = f"{first} {last}" f-string combinds the first and last name, to make a fullname

#M = f"Hello,+{fullname.upper()}. How are you doing" .upper, puts each and every leter into upper case (DAMIR DIEDUKHOV)
#M1 = f"Hello,{fullname.lower()}. How are you doing" .lower, puts each and every leter into lower case (damir diedukhov)
#M2 = f"Hello,{fullname.title()}. How are you doing" .titel, makes each and every first letter of a word upper case (Damir, Diedukhov)

#print(M +"\n" + M1 + "\n" + M2) #"\n" makes a new clluom in the text 


#print("'\t'python")  #In Python, \t represents the tab sequence for a horizontal tab character. When used within a string, \t is interpreted as a tab character and produces horizontal spacing.

#text = "  Hello, World!  "

#stripped_text = text.rstrip() # strips on the right of the text
#stripped_text = text.lstrip() # strips on the left of the text
#stripped_text = text.strip() # strips on both sides of the text
#print(stripped_text)


#3 + 2  #adding
#3 - 2 #subtracting 
#3 * 2 #multiplying
#3 / 2 #dividing
#3 ** 2 #you're putting the first number to the power of the last number 


#first  = "Tim"
#last = "Peters"
#fullname = f"{first} {last}"

#message = f"The Zen of Python, by {fullname.title()} \nBeautiful is better than ugly."
#print(message)


#bycicles = ['gear', 'wheels', 'pedals', 'seat']
#print(bycicles[2]) brings out the name/thing you want from the list, or just brings the whole list out if you don't want anything. (no numbers)
#print(bycicles[2].title()) same thing like in the previous, only you have a list  that you take something out of and upper or lower case, and event title.

#bycicles = ['gear', 'wheels', 'pedals', 'seat']
#print(bycicles[-1]) negatives start from the end

#bycicles = ['gear', 'wheels', 'pedals', 'seat']
#message = f"On my first bike the {bycicles[-1].upper()} broke of!!!!!"
#print(message)

#motorcycles = ['honda', 'bughatii', 'lamborghini', 'mercedize']
#print(motorcycles)

#motorcycles[0] = 'toyota'
#print(motorcycles)

#motorcycles.append('honda') #.append function puts something into or taken out bakc into the list
#print(motorcycles)
#print(motorcycles[0])


#motorcycles = []
#motorcycles.append('honda')
#motorcycles.append('toyota')
#motorcycles.append('ford')


#print(motorcycles)


#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']

#cars.insert(0,'toyota') .insert helps you put something into a string where you want it to be, have to insert the index point.
#print(cars)

#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']

#del cars[0] del function helps ypu delete something you don't want to be in the list, have to put in the index point.
#print(cars)


#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']

#popped_cars = cars.pop() .pop takes out the last variable in the list. cant put in the index point.
#print(cars)
#print(popped_cars)

#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']

#popped_cars = cars.pop()
#last_car = f"The last car I used was a {popped_cars}."

#print(last_car)

#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']

#popped_cars = cars.pop(2)
#first_car = f"The first car I ever owened was a {popped_cars.title()}!!"
#print(first_car)

#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']
#print(cars)

#cars.remove('honda') .remove function removes anything you want if you spell the veriable correctly. 
#print(cars)

#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']
#print(cars)

#to_expensive = ('bughatii')
#cant_buy = f"A {to_expensive} is to expensive for me."
#print(cant_buy)


#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']
#print(cars)

#cars.sort() .sort, sorts all the variables in ABC order. 
#print(cars)


#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']

#cars.sort(reverse = True) # The reverse = True reverses evrything and makes it go ZYX order. (backwards)
#print(cars)

#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']

#print("\nHere is the originall list:")
#print(cars)

#print("\nHere is the sorted list:")
#print(sorted(cars)) the sorted() function just puts the list in order. put the name of the list in the ()

#print("\nHere is the originall list again:")
#print(cars)


#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']
#print(cars)

#cars.reverse() # .reverse just reverses the list.
#print(cars)

#cars = ['honda', 'bughatii', 'lamborghini', 'mercedize']
#lenght = len(cars) len function gives you the lenght of a list.
#print(lenght)

#names = ["john", "peter", "smith"]

#for name in names:  In this example, the for loop iterates over each item in the names list, and the variable name takes the value of each item in each iteration. The print(name) statement prints each name on a separate line. The in operator, when used with a for loop, checks if there are more items in the sequence to iterate over. It helps in controlling the flow of the loop and ensures that all items in the sequence are processed.
    #print(name)

#names = ["john", "peter", "smith"]

#for name in names:
    #print(f"{name.title()} come over here!!!")
#print(f"Can you bey me that bike for my birthday {name.title()}")

#for value in range(0, 1000000): In Python, the range() function is used to generate a sequence of numbers. It returns an object of the range type that represents a sequence of numbers.
    #print(value)

#numbers = list(range(1,1000)) In Python, the list() function is used to create a new list object. It takes an iterable as an argument and returns a list containing the elements of the iterable.
#print(numbers)

#even_numbers = list(range(2, 11, 2)) in ((2, 11, 2)) the first 2 adds up with another 2 till it comes to 11.
#print(even_numbers)

#squares = []
#for value in range(1, 11):
    #square = value ** 2
    #squares.append(square)each new value of square is appended to the list

#print(squares)

digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
min(digits)